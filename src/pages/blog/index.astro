---
import { getCollection } from 'astro:content';

import BlogIndex from '../../components/islands/BlogIndex';
import Breadcrumbs from '../../components/navigation/Breadcrumbs.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { collectUniqueTags, sortBlogPostsByPublishDate } from '../../utils/blog';
import { createBlogIndexTrail } from '../../utils/breadcrumbs';

const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const posts = sortBlogPostsByPublishDate(allPosts, 'desc');
const tags = collectUniqueTags(posts);
const listingPosts = posts.map((post) => ({
  slug: post.slug,
  title: post.data.title,
  description: post.data.description,
  publishDate: post.data.publishDate.toISOString(),
  tags: post.data.tags,
  estimatedReadingMinutes: post.data.estimatedReadingMinutes,
  author: {
    name: post.data.author.name,
  },
}));

const breadcrumbs = createBlogIndexTrail();
---

<BaseLayout
  title="Apotheon.ai Blog"
  description="Enterprise AI governance, delivery, and platform engineering guides from the Apotheon.ai field team."
>
  <Breadcrumbs
    baseHref={Astro.site?.origin ?? Astro.url.origin}
    class="mx-auto w-full max-w-5xl px-6 pt-12"
    trail={breadcrumbs}
  />
  <section class="mx-auto flex w-full max-w-5xl flex-col gap-12 px-6 py-16 text-slate-100">
    <header class="flex flex-col gap-4">
      <p class="text-sm font-semibold uppercase tracking-[0.35em] text-sky-300">Insights</p>
      <h1 class="text-4xl font-bold text-white md:text-5xl">
        Launch, govern, and scale enterprise AI safely
      </h1>
      <p class="max-w-3xl text-lg text-slate-300">
        Filters and sorting are backed by the same schema that powers feeds, related content, and
        Pagefind search. Update frontmatter once, and every surface—from RSS to future
        personalization—stays synchronized.
      </p>
      <p class="max-w-3xl text-sm text-slate-400">
        Prefer automation over manual curation: drop new MDX files into <code>src/content/blog</code
        >, commit, and let the release gate validate metadata, structured data, and accessibility.
      </p>
    </header>

    <!--
      BlogIndex hydrates client-side to enable responsive filtering while still emitting server-rendered markup for SEO +
      Pagefind. The article cards include `data-pagefind-*` attributes so the postbuild index automatically captures tags and
      metadata without extra scripts.
    -->
    <BlogIndex client:load posts={listingPosts} {tags} />

    <footer
      class="flex flex-wrap items-center justify-between gap-4 rounded-2xl border border-slate-800 bg-slate-900/40 px-4 py-3 text-sm text-slate-400"
    >
      <span>
        Subscribe via
        <a class="font-semibold text-sky-300 hover:text-sky-200" href="/rss.xml">RSS</a>
        or
        <a class="font-semibold text-sky-300 hover:text-sky-200" href="/atom.xml">Atom</a>
        to mirror the automation pipeline in downstream systems.
      </span>
      <span
        class="rounded-lg border border-slate-800 bg-slate-950/40 px-3 py-1 text-xs uppercase tracking-[0.3em] text-slate-500"
      >
        {listingPosts.length} published posts
      </span>
    </footer>
  </section>
</BaseLayout>
