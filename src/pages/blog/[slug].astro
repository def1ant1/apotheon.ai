---
/* eslint-disable astro/no-deprecated-getentrybyslug -- Requirement: maintain getEntryBySlug usage until Astro 5 migrations land */
import { getCollection, getEntryBySlug } from 'astro:content';

import AuthorBio from '../../components/blog/AuthorBio.astro';
import RelatedPosts from '../../components/blog/RelatedPosts.astro';
import SchemaScript from '../../components/blog/SchemaScript.astro';
import Breadcrumbs from '../../components/navigation/Breadcrumbs.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { resolveOgImage, scoreRelatedPosts } from '../../utils/blog';
import { createBlogPostTrail } from '../../utils/breadcrumbs';

export async function getStaticPaths() {
  const entries = await getCollection('blog', ({ data }) => !data.draft);
  return entries.map((entry) => ({
    params: { slug: entry.slug },
  }));
}

const { slug } = Astro.params;
const entry = slug ? await getEntryBySlug('blog', slug) : null;

if (!entry) {
  throw new Response('Not found', { status: 404 });
}

if (entry.data.draft && import.meta.env.PROD) {
  throw new Response('Not found', { status: 404 });
}

const { Content, headings } = await entry.render();

// Fetch once so we can score related posts without leaking drafts into production routes.
const publishedEntries = await getCollection('blog', ({ data }) => !data.draft);
const relatedPosts = scoreRelatedPosts(entry, publishedEntries, 3);

const siteOrigin = Astro.site?.origin ?? Astro.url.origin;
const canonicalUrl = new URL(`/blog/${entry.slug}/`, siteOrigin).href;
const { url: ogImageUrl, alt: ogImageAlt } = resolveOgImage(entry, siteOrigin);

const articleSchema = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': canonicalUrl,
  },
  headline: entry.data.title,
  description: entry.data.description,
  datePublished: entry.data.publishDate.toISOString(),
  dateModified: (entry.data.updatedDate ?? entry.data.publishDate).toISOString(),
  author: {
    '@type': 'Person',
    name: entry.data.author.name,
    ...(entry.data.author.title ? { jobTitle: entry.data.author.title } : {}),
  },
  publisher: {
    '@type': 'Organization',
    name: 'Apotheon.ai',
  },
  keywords: entry.data.tags.join(', '),
  timeRequired: `PT${entry.data.estimatedReadingMinutes}M`,
  isAccessibleForFree: true,
  image: ogImageUrl,
};

const breadcrumbs = createBlogPostTrail(entry);
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <Fragment slot="head">
    <SchemaScript schema={articleSchema} />
    <link rel="canonical" href={canonicalUrl} />
    <meta property="og:type" content="article" />
    <meta property="og:title" content={entry.data.title} />
    <meta property="og:description" content={entry.data.description} />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:image:alt" content={ogImageAlt} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={entry.data.title} />
    <meta name="twitter:description" content={entry.data.description} />
    <meta name="twitter:image" content={ogImageUrl} />
    <!-- TODO(Epic-14): Swap the static OG meta tags with Worker-generated payloads once the automation ships. -->
  </Fragment>
  <Breadcrumbs
    baseHref={Astro.site?.origin ?? Astro.url.origin}
    class="mx-auto w-full max-w-3xl px-6 pt-12"
    trail={breadcrumbs}
  />
  <article class="mx-auto flex w-full max-w-3xl flex-col gap-12 px-6 py-16 text-slate-100">
    <header class="flex flex-col gap-6">
      <p class="text-sm font-semibold uppercase tracking-[0.35em] text-sky-300">
        Apotheon.ai Insights
      </p>
      <h1 class="text-4xl font-bold text-white md:text-5xl">{entry.data.title}</h1>
      <p class="text-lg text-slate-300">{entry.data.description}</p>
      {
        entry.data.heroImage && (
          <figure class="overflow-hidden rounded-3xl border border-slate-800">
            <img
              src={entry.data.heroImage}
              alt={entry.data.heroImageAlt ?? ''}
              loading="lazy"
              class="h-auto w-full"
            />
            {entry.data.heroImageAlt && (
              <figcaption class="bg-slate-900/60 px-4 py-3 text-sm text-slate-400">
                {entry.data.heroImageAlt}
              </figcaption>
            )}
          </figure>
        )
      }
    </header>

    <AuthorBio
      author={entry.data.author}
      publishDate={entry.data.publishDate}
      updatedDate={entry.data.updatedDate}
      readingTimeMinutes={entry.data.estimatedReadingMinutes}
    />

    <section class="prose prose-invert prose-slate max-w-none">
      <Content />
    </section>

    {
      headings.length > 3 && (
        <aside class="rounded-2xl border border-slate-800 bg-slate-900/40 p-6 text-sm text-slate-300">
          <h2 class="text-base font-semibold text-white">On this page</h2>
          <ol class="mt-4 space-y-2">
            {headings
              .filter((heading) => heading.depth <= 3)
              .map((heading) => (
                <li>
                  <a class="hover:text-sky-200" href={`#${heading.slug}`}>
                    {heading.text}
                  </a>
                </li>
              ))}
          </ol>
        </aside>
      )
    }

    <RelatedPosts posts={relatedPosts} />
  </article>
</BaseLayout>
