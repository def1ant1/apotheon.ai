---
/* eslint-disable astro/no-deprecated-getentrybyslug -- Requirement: maintain getEntryBySlug usage until Astro 5 migrations land */
import { getCollection, getEntryBySlug } from 'astro:content';

import AuthorBio from '../../components/blog/AuthorBio.astro';
import RelatedPosts from '../../components/blog/RelatedPosts.astro';
import Breadcrumbs from '../../components/navigation/Breadcrumbs.astro';
import SchemaScript from '../../components/seo/SchemaScript.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { resolveOgImage, scoreRelatedPosts } from '../../utils/blog';
import { createBlogPostTrail } from '../../utils/breadcrumbs';
import { buildArticleSchema, buildBreadcrumbSchema, resolveLocaleFromPath } from '../../utils/seo';

export async function getStaticPaths() {
  const entries = await getCollection('blog', ({ data }) => !data.draft);
  return entries.map((entry) => ({
    params: { slug: entry.slug },
  }));
}

const { slug } = Astro.params;
const entry = slug ? await getEntryBySlug('blog', slug) : null;

if (!entry) {
  throw new Response('Not found', { status: 404 });
}

if (entry.data.draft && import.meta.env.PROD) {
  throw new Response('Not found', { status: 404 });
}

const { Content, headings } = await entry.render();

// Fetch once so we can score related posts without leaking drafts into production routes.
const publishedEntries = await getCollection('blog', ({ data }) => !data.draft);
const relatedPosts = scoreRelatedPosts(entry, publishedEntries, 3);

const siteOrigin = Astro.site?.origin ?? Astro.url.origin;
const canonicalUrl = new URL(`/blog/${entry.slug}/`, siteOrigin).href;
const { url: ogImageUrl, alt: ogImageAlt } = resolveOgImage(entry, siteOrigin);
const breadcrumbs = createBlogPostTrail(entry);
const analyticsEndpoint = import.meta.env.PUBLIC_BLOG_ANALYTICS_ENDPOINT ?? '/api/blog/analytics';
const publishIso = new Date(entry.data.publishDate).toISOString();

const pageLocale = resolveLocaleFromPath(Astro.url.pathname) ?? 'en-US';
const seo = {
  title: entry.data.title,
  description: entry.data.description,
  path: `/blog/${entry.slug}/`,
  locale: pageLocale,
  openGraph: {
    type: 'article',
    images: [{ url: ogImageUrl, alt: ogImageAlt }],
    publishedTime: entry.data.publishDate,
    modifiedTime: entry.data.updatedDate ?? entry.data.publishDate,
    tags: entry.data.tags,
    section: 'Insights',
  },
};

const articleSchema = buildArticleSchema({
  headline: entry.data.title,
  description: entry.data.description,
  url: canonicalUrl,
  publishedTime: entry.data.publishDate,
  modifiedTime: entry.data.updatedDate ?? entry.data.publishDate,
  authorName: entry.data.author.name,
  authorTitle: entry.data.author.title,
  image: ogImageUrl,
  tags: entry.data.tags,
  readingTimeMinutes: entry.data.estimatedReadingMinutes,
  locale: pageLocale,
});
const breadcrumbSchema = buildBreadcrumbSchema(breadcrumbs, siteOrigin, pageLocale);
---

<BaseLayout {seo} locale={pageLocale}>
  <Fragment slot="head">
    <SchemaScript schema={[articleSchema, breadcrumbSchema]} />
  </Fragment>
  <Breadcrumbs
    baseHref={Astro.site?.origin ?? Astro.url.origin}
    class="mx-auto w-full max-w-3xl px-6 pt-12"
    trail={breadcrumbs}
  />
  <article class="mx-auto flex w-full max-w-3xl flex-col gap-12 px-6 py-16 text-slate-100">
    <header class="flex flex-col gap-6">
      <p class="text-sm font-semibold uppercase tracking-[0.35em] text-sky-300">
        Apotheon.ai Insights
      </p>
      <h1 class="text-4xl font-bold text-white md:text-5xl">{entry.data.title}</h1>
      <p class="text-lg text-slate-300">{entry.data.description}</p>
      {
        entry.data.heroImage && (
          <figure class="overflow-hidden rounded-3xl border border-slate-800">
            <img
              src={entry.data.heroImage}
              alt={entry.data.heroImageAlt ?? ''}
              loading="lazy"
              class="h-auto w-full"
            />
            {entry.data.heroImageAlt && (
              <figcaption class="bg-slate-900/60 px-4 py-3 text-sm text-slate-400">
                {entry.data.heroImageAlt}
              </figcaption>
            )}
          </figure>
        )
      }
    </header>

    <AuthorBio
      author={entry.data.author}
      publishDate={entry.data.publishDate}
      updatedDate={entry.data.updatedDate}
      readingTimeMinutes={entry.data.estimatedReadingMinutes}
    />

    <section class="prose prose-invert prose-slate max-w-none">
      <Content />
    </section>

    {
      headings.length > 3 && (
        <aside class="rounded-2xl border border-slate-800 bg-slate-900/40 p-6 text-sm text-slate-300">
          <h2 class="text-base font-semibold text-white">On this page</h2>
          <ol class="mt-4 space-y-2">
            {headings
              .filter((heading) => heading.depth <= 3)
              .map((heading) => (
                <li>
                  <a class="hover:text-sky-200" href={`#${heading.slug}`}>
                    {heading.text}
                  </a>
                </li>
              ))}
          </ol>
        </aside>
      )
    }

    <RelatedPosts posts={relatedPosts} />
    <!-- Sentinel lets the inline module fire a conversion event once visitors reach the footer. -->
    <div aria-hidden="true" data-blog-analytics="read-depth"></div>
  </article>
  <div
    aria-hidden="true"
    data-blog-analytics-config
    data-endpoint={analyticsEndpoint}
    data-publish-date={publishIso}
    data-slug={entry.slug}
    data-tags={JSON.stringify(entry.data.tags)}
    data-title={entry.data.title}
  >
  </div>
  <script src="/scripts/blog-analytics.js" type="module"></script>
</BaseLayout>
