---
import { getEntry } from 'astro:content';

import HomepageHero from '../components/homepage/HomepageHero.astro';
import LiveClock from '../components/islands/LiveClock';
import { homepageEntryId } from '../content/homepage';
import BaseLayout from '../layouts/BaseLayout.astro';

const homepageEntry = await getEntry('homepage', homepageEntryId);
const { Content: HeroDescription } = await homepageEntry.render();
const heroMetaDescription =
  homepageEntry.data.supportingBullets[0]?.description ??
  'Operational intelligence for distributed Astro deployments.';
---

<BaseLayout title={homepageEntry.data.headline} description={heroMetaDescription}>
  <section class="flex flex-col gap-12" data-analytics-region="homepage-overview">
    <HomepageHero hero={homepageEntry.data}>
      <HeroDescription />
    </HomepageHero>

    <article class="grid gap-12 lg:grid-cols-[2fr,1fr]" data-analytics-block="homepage-foundations">
      <div class="space-y-6">
        <h2 class="text-2xl font-semibold text-white">Composable foundations</h2>
        <p class="text-base text-slate-300">
          Drop future MDX files into <code>src/content/blog</code> or <code
            >src/content/marketing</code
          > and Astro will automatically type-check frontmatter, generate static pages, and refresh the
          Pagefind index as part of <code>npm run build</code> (rerun search only with
          <code>npm run search:index</code>).
        </p>
        <p class="text-base text-slate-300">
          Tailwind CSS is wired via the official Astro integration, so design systems stay
          consistent without custom plumbing. Global CSS lives in <code>src/styles/global.css</code>
          and is imported once through <code>BaseLayout.astro</code>.
        </p>
        <p class="text-base text-slate-300">
          React islands remain fully supported for analytics widgets, onboarding flows, or other
          targeted interactivity. Hydrate them with any <code>client:*</code> directive and keep the
          rest of the experience static-first.
        </p>
      </div>
      <!-- Live clock hydration can wait until the component scrolls into view; analytics and demos track the same behavior while protecting LCP. -->
      <LiveClock client:visible />
    </article>
  </section>
</BaseLayout>
