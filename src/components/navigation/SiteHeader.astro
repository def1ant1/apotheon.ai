---
import { getValidatedNavigationGroups } from './navigationData';
import { getAvailableLocales, getDefaultLocale } from '../../i18n';
import { detectLocaleFromPath, useTranslations } from '../../i18n/runtime';
import { isLocaleQASwitcherEnabled } from '../../utils/featureFlags';
import LocaleSwitcher, { type LocaleSwitcherLabels } from '../islands/LocaleSwitcher';
import MobileNavigationDrawer from '../islands/MobileNavigationDrawer';
import PagefindSearch from '../islands/PagefindSearch';
import PrefetchController, { PREFETCH_ATTRIBUTE_PAYLOAD } from '../islands/PrefetchController';
import RadixNavigationMenu, { type NavigationMenuGroup } from '../islands/RadixNavigationMenu';

/**
 * Consolidated navigation data lives in `navigationData.ts`. Centralizing the lookup allows the
 * header, footer, Ladle stories, and any future surfaces to hydrate from a single validation
 * pipeline while still receiving strongly typed objects.
 */
const { t } = await useTranslations(Astro);
const sanitizedMenuGroups: ReadonlyArray<NavigationMenuGroup> =
  await getValidatedNavigationGroups(t);
/**
 * Centralize the skip-link target ID so the runtime focus manager and tests stay in sync. The ID
 * is mirrored in `BaseLayout` (`<main id="main">`) and referenced by the client-side focus
 * utility to satisfy WCAG 2.4.1 (Bypass Blocks) across locales.
 */
const MAIN_CONTENT_ID = 'main' as const;
const availableLocales = getAvailableLocales();
const defaultLocale = getDefaultLocale();
const currentLocale = detectLocaleFromPath?.(Astro.url.pathname) ?? defaultLocale;
const localeSwitcherEnabled = isLocaleQASwitcherEnabled();
const localeSwitcherLabels: LocaleSwitcherLabels = {
  ariaLabel: t('navigation.localeSwitcher.ariaLabel', {
    defaultValue: 'QA locale switcher for language verification',
  }),
  instructions: t('navigation.localeSwitcher.instructions', {
    defaultValue:
      'Focus to reveal QA-only locales. Production builds stay on the default language unless the QA flag is enabled.',
  }),
  statusCurrent: t('navigation.localeSwitcher.status.current', {
    defaultValue: 'Browsing the {{locale}} locale.',
  }),
  statusUpdated: t('navigation.localeSwitcher.status.updated', {
    defaultValue: 'Switching to {{locale}}â€¦',
  }),
  defaultLocaleSuffix: t('navigation.localeSwitcher.defaultLocaleSuffix', {
    defaultValue: 'default locale',
  }),
};
---

{
  /**
  The global header anchors the skip link, logo, and navigation landmarks. Explicitly declaring the
  banner role and aria label defends against regressions if we ever wrap the header in additional
  containers or port it into host frameworks that manipulate landmark semantics.
*/
}
<header
  role="banner"
  aria-label={t('navigation.aria.primaryHeader', { defaultValue: 'Primary site header' })}
  class="bg-surface-base/70 px-gutter-inline pb-space-sm pt-space-xs supports-[backdrop-filter]:bg-surface-base/60 sticky top-0 z-40 flex justify-center backdrop-blur"
>
  {
    /**
    PrefetchController hydrates here so every layout that ships the global header gains speculative
    navigation automatically. The island renders nothing visually but wires runtime observers to
    anchors annotated with `data-prefetch="intent"`.
  */
  }
  <PrefetchController client:idle />
  <div class="gap-space-xs flex w-full max-w-5xl flex-col">
    {
      /**
      Keep the skip link as the first interactive element so assistive tech exposes it immediately.
      The target maps to `<main id="main" tabindex="-1">` declared in `BaseLayout`.
    */
    }
    <a
      class="sr-only focus:not-sr-only"
      data-skip-link
      href={`#${MAIN_CONTENT_ID}`}
      data-skip-link-target={MAIN_CONTENT_ID}
    >
      {t('navigation.skipLink', { defaultValue: 'Skip to content' })}
    </a>

    {
      /**
      QA can flip `PUBLIC_ENABLE_LOCALE_QA_SWITCHER` on during staging or
      ad-hoc verification runs to expose the otherwise hidden language
      selector. Leaving the feature flag off keeps production in the default
      locale while still letting us QA translated routes end-to-end without
      shipping experimental UI to customers.
    */
    }
    {
      localeSwitcherEnabled && (
        <LocaleSwitcher
          client:idle
          availableLocales={availableLocales}
          currentLocale={currentLocale}
          defaultLocale={defaultLocale}
          labels={localeSwitcherLabels}
          pathname={Astro.url.pathname}
        />
      )
    }

    <div class="gap-space-xs flex items-start justify-between">
      <div class="gap-space-3xs flex flex-col">
        <a
          {...PREFETCH_ATTRIBUTE_PAYLOAD}
          href="/"
          class="text-title-sm text-ink-primary hover:text-accent-brand font-black tracking-tight transition"
        >
          {t('navigation.brand.name', { defaultValue: 'Apotheon.ai' })}
        </a>
        <p class="text-caption text-ink-muted sm:text-body-sm">
          {
            t('navigation.brand.tagline', {
              defaultValue: 'Automation-first GTM fabric for enterprise AI launches.',
            })
          }
        </p>
      </div>

      <div class="sm:hidden">
        <MobileNavigationDrawer client:idle groups={sanitizedMenuGroups} />
      </div>
    </div>

    <div
      class="hidden sm:block"
      data-welcome-tour-target="global-search"
      data-welcome-tour-label={t('homepage.welcomeTour.targets.search', {
        defaultValue: 'Global search launcher',
      })}
    >
      {
        /**
        Keyboard navigation: the search island keeps focus within the input/results column. Tabbing from the
        input advances directly into the streaming list items without stealing focus back when Pagefind resolves
        additional matches. We document the behaviour inline so future refactors preserve the zero-jump contract.
      */
      }
      <PagefindSearch client:idle />
    </div>

    <div
      class="hidden sm:block"
      data-welcome-tour-target="primary-navigation"
      data-welcome-tour-label={t('homepage.welcomeTour.targets.navigation', {
        defaultValue: 'Primary navigation system',
      })}
    >
      {
        /** Desktop navigation hydrates lazily; Radix still renders semantic `<nav aria-label="Primary">`. */
      }
      <RadixNavigationMenu client:idle groups={sanitizedMenuGroups} />
    </div>
  </div>
</header>

{
  /**
   * Ship a tiny client module that wires the skip link to the shared focus utility. We keep the
   * orchestration here (instead of scattering ad-hoc listeners) so the SiteHeader remains the single
   * authority for enterprise navigation. The helper handles smooth-scroll completion, respects the
   * `prefers-reduced-motion` contract, and programmatically focuses `#main` once the viewport settles
   * to guarantee deterministic keyboard landings in audits.
   */
}
<script type="module" is:inline>
  import { initSiteHeaderAnchorFocus } from './siteHeader.client';

  initSiteHeaderAnchorFocus();
</script>
