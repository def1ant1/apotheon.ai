/// <reference path="../.astro/types.d.ts" />
/// <reference path="./types/og-worker.d.ts" />
/// <reference types="astro/client" />
/// <reference types="vitest" />
/// <reference types="@playwright/test" />

declare module 'astro/dist/runtime/server/render/index.js';
declare module '@testing-library/react';
declare module '@testing-library/user-event';
declare module 'vitest/config';
declare module 'vitest';
declare module '*.astro';
declare module '@radix-ui/react-dialog';
declare global {
  namespace App {
    interface Locals {
      /**
       * Nonce generated by `securityMiddleware`. Inline `<script>`/`<style>` tags
       * can reference this value to stay aligned with the active CSP header.
       */
      cspNonce?: string;
    }
  }

  interface ImportMetaEnv {
    readonly PUBLIC_CONTACT_ENDPOINT: string;
    readonly PUBLIC_WHITEPAPER_ENDPOINT?: string;
    readonly PUBLIC_TURNSTILE_SITE_KEY: string;
    readonly PUBLIC_OG_IMAGE_WORKER?: string;
    readonly PUBLIC_BLOG_ANALYTICS_ENDPOINT?: string;
    readonly PUBLIC_LEAD_VIEWER_API_BASE?: string;
    readonly PUBLIC_SYNTHETIC_STATUS_ENDPOINT?: string;
    readonly PUBLIC_EXPERIMENTS_ENDPOINT?: string;
    readonly PUBLIC_ENABLE_LOCALE_QA_SWITCHER?: string;
  }

  interface ImportMeta {
    readonly env: ImportMetaEnv;
  }

  interface Window {
    dataLayer?: unknown[];
    turnstile?: {
      render(
        container: string | HTMLElement,
        options: {
          sitekey: string;
          callback: (token: string) => void;
          'error-callback'?: () => void;
          'expired-callback'?: () => void;
          appearance?: 'always' | 'execute' | 'interaction-only';
        },
      ): string;
      reset(widgetId?: string): void;
    };
    __CONTACT_FORM_SET_TOKEN__?: (value: string) => void;
    __WHITEPAPER_FORM_SET_TOKEN__?: (value: string) => void;
    __APOTHEON_SYNTHETIC_STATUS_ENDPOINT__?: string;
    __APOTHEON_EXPERIMENTS_ENDPOINT__?: string;
    __APOTHEON_EXPERIMENTS_CACHE__?: unknown;
  }

  // Injected via `astro.config.mjs` to surface derivative metadata generated by the ensure scripts.
  const __APOTHEON_IMAGE_MANIFEST__: {
    version: number;
    assets: Record<
      string,
      {
        base: string;
        derivatives?: Record<string, string>;
        preload?: boolean;
        lcpCandidate?: boolean;
        width?: number;
        height?: number;
        checksum?: string;
      }
    >;
  };
}

export {};
