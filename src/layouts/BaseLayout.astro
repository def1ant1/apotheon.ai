---
import '../styles/global.css';

import ConsentManager from '../components/islands/ConsentManager';
import SiteFooter from '../components/navigation/SiteFooter.astro';
import SiteHeader from '../components/navigation/SiteHeader.astro';
import { createPageSeo, resolveLocaleFromPath, type PageSeoInput } from '../utils/seo';

interface Props {
  seo: PageSeoInput;
  /**
   * Optional locale override supplied by page shells. When omitted we infer the locale from the
   * current pathname using the manifest definitions so canonical URLs + hreflang tags stay aligned
   * with the directory structure.
   */
  locale?: string;
}

const { seo, locale: explicitLocale } = Astro.props as Props;

const metadata = createPageSeo(
  {
    ...seo,
    // Default to Astro.url.pathname when callers omit a canonical path override.
    path: seo.path ?? Astro.url.pathname,
  },
  {
    site: Astro.site ?? Astro.url,
    currentPath: Astro.url.pathname,
    locale: explicitLocale ?? resolveLocaleFromPath(Astro.url.pathname),
  },
);

interface ImageManifestAsset {
  base: string;
  derivatives?: Record<string, string>;
  preload?: boolean;
  lcpCandidate?: boolean;
  width?: number;
  height?: number;
  checksum?: string;
}

interface ImageManifest {
  version: number;
  assets: Record<string, ImageManifestAsset>;
}
const imageManifestSource = (globalThis as { __APOTHEON_IMAGE_MANIFEST__?: unknown })
  .__APOTHEON_IMAGE_MANIFEST__;
const fallbackManifest: ImageManifest = { version: 0, assets: {} };
const rawImageManifest: ImageManifest =
  typeof imageManifestSource === 'string'
    ? (JSON.parse(imageManifestSource) as ImageManifest)
    : ((imageManifestSource as ImageManifest | undefined) ?? fallbackManifest);

const imagePreloads = Object.values(rawImageManifest.assets).filter(
  (asset) => asset.preload === true,
);
const lcpCandidates = Object.entries(rawImageManifest.assets)
  .filter(([, asset]) => asset.lcpCandidate === true)
  .map(([key]) => key);
---

<!doctype html>
<html lang={metadata.locale} data-theme="night">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!--
      Metadata is composed via src/utils/seo.ts so every page inherits consistent
      canonical URLs, OpenGraph payloads, and hreflang alternates. Adjust the
      helper when we introduce new channels (e.g., locale expansions) rather
      than sprinkling manual tags through templates.
    -->
    <title>{metadata.title}</title>
    {
      metadata.metaTags.map((tag) => (
        <meta
          {...(tag.name ? { name: tag.name } : {})}
          {...(tag.property ? { property: tag.property } : {})}
          content={tag.content}
        />
      ))
    }
    {
      metadata.linkTags.map((link) => (
        <link
          rel={link.rel}
          href={link.href}
          {...(link.hreflang ? { hreflang: link.hreflang } : {})}
        />
      ))
    }
    <!--
      Favicon + PWA metadata is regenerated via `npm run brand:favicons`.
      The command ensures every browser (desktop, mobile, pinned tabs) pulls the
      same iconography + theme colors without manual raster edits.
    -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#4F46E5" />
    <meta name="theme-color" content="#4F46E5" />
    <meta name="msapplication-TileColor" content="#111827" />
    {
      imagePreloads.length > 0 && (
        <meta
          name="apotheon:preload-assets"
          content={imagePreloads.map((asset) => asset.base).join(',')}
        />
      )
    }
    {
      lcpCandidates.length > 0 && (
        <meta name="apotheon:lcp-candidates" content={lcpCandidates.join(',')} />
      )
    }
    <!--
      Fonts are imported via src/styles/global.css using @fontsource-variable/inter
      so we never punch holes in the CSP for third-party font CDNs.
    -->
    <slot name="head" />
  </head>
  <body class="font-sans" data-lcp-candidates={lcpCandidates.join(',')}>
    <!--
      Centralized header renders once per layout so every route inherits the Radix menu hydration
      directive. Astro keeps the markup static until `client:idle` fires, which means crawlers and
      low-power devices still receive accessible fallback navigation.
    -->
    <slot name="preheader" />
    <SiteHeader />
    <main id="main">
      <slot />
    </main>
    <SiteFooter />
    <!--
      ConsentManager renders as a global island so every page inherits the Klaro-driven preferences modal.
      We hydrate on `client:load` to ensure consent gating applies before other analytics islands fire.
    -->
    <ConsentManager client:load />
  </body>
</html>
